#!/usr/bin/php
<?php

/*
 This file is part of Grease
 http://github.com/AndrewRose/Grease
 http://andrewrose.co.uk
 License: GPL; see below
 Copyright Andrew Rose (hello@andrewrose.co.uk) 2014

    Grease is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Grease is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Grease.  If not, see <http://www.gnu.org/licenses/>
*/

include_once('libxdebugd.php');

class Grease extends wxFrame
{
	public $settingsFile;
	public $tree;
	public $treeRoot;
	public $notebook;
	public $buffers = [];
	public $searchTextCtrl = FALSE;
	public $searchReplaceSearchTextCtrl = FALSE;
	public $consoleWindow = FALSE;
	public $consoleTextctrl = FALSE;
	public $leftPanel;

	public $readonlyBuffers = [];

	public $activeDebugSession = FALSE;
	public $xdebug = FALSE;

	public $debugContext;
	public $debugContextRoot;

	public $debugStack;

	public $filesOpen = [];

	public $settings =
	[
		'theme' => 'grease',
		'font-size' => 10,
		'font-face' => 'Courier New',

		'xdebug' =>
		[
			'host' => '127.0.0.1',
			'port' => '9000'
		],

		'projects' =>
		[

		],

		'themes' =>
		[
			'grease' =>
			[
				'background-color' => '0xC0C0C0',
				'wxSTC_STYLE_DEFAULT' => '0x1E5A14',
				'wxSTC_HPHP_DEFAULT' => '0x1E5A14',
				'wxSTC_HPHP_HSTRING' => '0x1E5A14',
				'wxSTC_HPHP_SIMPLESTRING' => '0x1E5A14',
				'wxSTC_HPHP_WORD' => '0x1E5A14',
				'wxSTC_HPHP_NUMBER' => '0x1E5A14',
				'wxSTC_HPHP_VARIABLE' => '0x1E5A14',
				'wxSTC_HPHP_COMMENT' => '0x1E5A14',
				'wxSTC_HPHP_COMMENTLINE' => '0x1E5A14',
				'wxSTC_HPHP_HSTRING_VARIABLE' => '0x1E5A14',
				'wxSTC_HPHP_OPERATOR' => '0x1E5A14'
			]
		],

		'state' =>
		[
			'files' =>
			[

			]
		]
	];
	public $theme = FALSE;

	public $styles =
	[
		'php' =>
		[
			'wxSTC_STYLE_DEFAULT' => wxSTC_STYLE_DEFAULT,
			'wxSTC_HPHP_DEFAULT' => wxSTC_HPHP_DEFAULT,
			'wxSTC_HPHP_HSTRING' => wxSTC_HPHP_HSTRING,
			'wxSTC_HPHP_SIMPLESTRING' => wxSTC_HPHP_SIMPLESTRING,
			'wxSTC_HPHP_WORD' => wxSTC_HPHP_WORD,
			'wxSTC_HPHP_NUMBER' => wxSTC_HPHP_NUMBER,
			'wxSTC_HPHP_VARIABLE' => wxSTC_HPHP_VARIABLE,
			'wxSTC_HPHP_COMMENT' => wxSTC_HPHP_COMMENT,
			'wxSTC_HPHP_COMMENTLINE' => wxSTC_HPHP_COMMENTLINE,
			'wxSTC_HPHP_HSTRING_VARIABLE' => wxSTC_HPHP_HSTRING_VARIABLE,
			'wxSTC_HPHP_OPERATOR' => wxSTC_HPHP_OPERATOR
		]
	];

	public $searchWindow = FALSE;

	public function createToolbar()
	{
		$toolbar = new wxAuiToolBar($this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxAUI_TB_VERTICAL);

		$icons  = [
			'newtab' => ['name' => 'New Tab', 'description' => 'New Tab', 'callback' => 'onAddTab'],
			'fileopen' => ['name' => 'Open File', 'description' => 'Open File', 'callback' => 'onOpenFile'],
			'filesave' => ['name' => 'Save Tab', 'description' => 'Save Tab', 'callback' => 'onSaveTab'],
			'filesaveas' => ['name' => 'Save File As', 'description' => 'Save File As', 'callback' => 'onSaveTabAs'],
			FALSE,
			'find' => ['name' => 'Find', 'description' => 'Find', 'callback' => 'onFind'],
			'findreplace' => ['name' => 'Find / Replace', 'description' => 'Find / Replace', 'callback' => 'onFindReplace'],
			FALSE,
			'debug_run' => ['name' => 'Debug - Start / Run', 'description' => 'Debug - Start / Run', 'callback' => 'onDebugStart'],
			'debug_step_into' => ['name' => 'Debug - Step Into', 'description' => "Debug - Step Into\nSteps to the next statement, if there is a function call involved it will break on the first statement in that function", 'callback' => 'onDebugStepInto'],
			/*'debug_step_out' => ['name' => 'Debug - Step Out', 'description' => "Debug - Step Out\nSteps out of the current scope and breaks on the statement after returning from the current function", 'callback' => 'onDebugStepOut'],
			'debug_step_over' => ['name' => 'Debug - Step Over', 'description' => "Debug - Step Over\nSteps to the next statement, if there is a function call on the line from which the step_over is issued then the debugger engine will stop at the statement after the function call in the same scope as from where the command was issued", 'callback' => 'onDebugStepOver'],*/
			'debug_stop' => ['name' => 'Debug - Stop', 'description' => 'Debug - Stop', 'callback' => 'onDebugStop'],
			FALSE,
			'console' => ['name' => 'Console', 'description' => 'Console', 'callback' => 'onConsoleShow'],
			'about' => ['name' => 'About', 'description' => 'About', 'callback' => 'onAbout']
		];

		$i = 1;
		foreach($icons as $iconName => $params)
		{
			if(!$params)
			{
				$toolbar->AddSeparator();
			}
			else
			{
				$icon = new wxBitmap();
				$icon->LoadFile(dirname(__FILE__).'/ico'.DIRECTORY_SEPARATOR.$iconName.'.ico', wxBITMAP_TYPE_ICO);
				$toolbar->AddTool($i, $params['name'], $icon, $params['description'], wxITEM_NORMAL);
				$this->Connect($i, wxEVT_COMMAND_MENU_SELECTED, [$this, $params['callback']]);
				$i++;
			}
		}

		$toolbar->Realize();
		return $toolbar;
	}

	public function __construct( $parent=null )
	{
		parent::__construct( $parent, wxID_ANY, "Grease", wxDefaultPosition, new wxSize( 1600,900 ), wxDEFAULT_FRAME_STYLE|wxTAB_TRAVERSAL );

		$this->settingsFile = $_SERVER['HOME'].'/.grease';

		if(file_exists($this->settingsFile))
		{
			$this->settings = json_decode(file_get_contents($this->settingsFile), TRUE);
		}

		$this->Connect(wxEVT_CLOSE_WINDOW, [$this, 'onWindowClose']);
		$this->theme = &$this->settings['themes'][$this->settings['theme']];

		$this->SetSizeHints(wxDefaultSize, wxDefaultSize);
//		$this->initMenu($this);

		$sizer = new wxBoxSizer(wxHORIZONTAL);

		$toolbar = $this->createToolbar();

		/* splitters */
		$this->secondarySplitterWindow = new wxSplitterWindow($this, wxID_ANY);
		$this->primarySplitterWindow = new wxSplitterWindow($this->secondarySplitterWindow, wxID_ANY, wxDefaultPosition, new wxSize(-1, 500));

		/* left panel */
$leftPanelMaxSize = 300; //($this->GetSize()->GetWidth()/100)*20;
		$this->leftPanel = new wxPanel($this->primarySplitterWindow, wxID_ANY, wxDefaultPosition, new wxSize($leftPanelMaxSize, -1));
		$leftSizer = new wxBoxSizer(wxVERTICAL);

		$this->tree = new wxTreeCtrl($this->leftPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTR_HIDE_ROOT|wxTR_HAS_BUTTONS);

		$this->debugContext = new wxTreeCtrl($this->leftPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTR_HIDE_ROOT|wxTR_HAS_BUTTONS);
		$this->debugContextRoot = $this->debugContext->AddRoot('wxphp');

		$this->treeRoot = $this->tree->AddRoot('wxphp');

		foreach($this->settings['projects'] as $name => $details)
		{
			$this->treeAddRoot($details['name'], $details['path'], $name);
		}

		$this->tree->Connect(wxEVT_TREE_SEL_CHANGED, [$this, "onTreeClick"]);

		$this->debugStack = new wxListCtrl ($this->leftPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_LIST);

		$leftSizer->Add($this->tree, 1, wxALL|wxEXPAND, 5);
		$leftSizer->Add($this->debugContext, 1, wxALL|wxEXPAND, 5);
		$leftSizer->Add($this->debugStack, 1, wxALL|wxEXPAND, 5);

		$this->debugContext->Hide();
		$this->debugStack->Hide();

		$this->leftPanel->SetSizer($leftSizer);
		$this->leftPanel->Layout();

		/* right panel */
$rightPanelMaxSize = $this->GetSize()->GetWidth()-$leftPanelMaxSize; //($this->GetSize()->GetWidth()/100)*80;
		$rightPanel = new wxPanel($this->primarySplitterWindow, wxID_ANY, wxDefaultPosition, new wxSize($rightPanelMaxSize, -1));
		$rightSizer = new wxBoxSizer(wxVERTICAL);

		$this->notebook = new wxAuiNotebook($rightPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxAUI_NB_DEFAULT_STYLE | wxAUI_NB_CLOSE_ON_ALL_TABS | wxNO_BORDER);
		$this->notebook->Connect(wxID_ANY, wxEVT_AUINOTEBOOK_PAGE_CHANGED, [$this, 'onTabChange']); // AUINotebook event doesn't work ..
		$this->notebook->Connect(wxID_ANY, wxEVT_AUINOTEBOOK_PAGE_CLOSE, [$this, 'onTabClose']); // ...

		//$this->notebook = new wxNotebook($rightPanel, wxID_ANY);
		//$this->notebook->Connect(wxID_ANY, wxEVT_NOTEBOOK_PAGE_CHANGED, [$this, 'onTabChange']); // but can change to normal Notebook and it will..

		$rightSizer->Add($this->notebook, 1, wxALL|wxEXPAND, 5);
		$rightPanel->SetSizer($rightSizer);
		$rightPanel->Layout();
		$rightSizer->Fit($rightPanel);

		/* main splitter window */
		$this->primarySplitterWindow->SplitVertically($this->leftPanel, $rightPanel);
		$this->createConsoleWindow($this->secondarySplitterWindow);

		$this->secondarySplitterWindow->Initialize($this->primarySplitterWindow);
		$this->primarySplitterWindow->SetSashGravity(0.0);
		$sizer->Add($this->secondarySplitterWindow, 1, wxALL|wxEXPAND, 5);
		$sizer->Add($toolbar, 0, wxALL, 5 );

		$this->SetSizer($sizer);
		$this->Layout();

		//$this->ShowFullScreen(true, wxFULLSCREEN_ALL);
		$this->Centre( wxBOTH );

		$this->createSearchDialog();
		$this->createSearchReplaceDialog();
		//$this->createConsoleWindow();

		$this->searchWindow->Hide();

		$this->xdebug = new libxdebugd();
		$this->xdebug->connect();

		foreach($this->settings['state']['files'] as $file => $state)
		{
			$bufferId = $this->addTab(basename($file), $file);
			$this->filesOpen[$file] = $bufferId;
		}
	}

	public function onMarginClick($ev)
	{
		$bufferId = $this->getTabSelected();
		$lineNumber = (int)$this->buffers[$bufferId]['textctrl']->LineFromPosition($ev->GetPosition());

		if(!isset($this->buffers[$bufferId]['breakpoints'][$lineNumber]))
		{
			$this->buffers[$bufferId]['textctrl']->MarkerAdd($lineNumber, 0);
			$this->buffers[$bufferId]['breakpoints'][$lineNumber] =  $this->onDebugBreakpointSetLine($this->buffers[$bufferId]['realpath'], $lineNumber+1);

		}
		else
		{
			$this->buffers[$bufferId]['textctrl']->MarkerDelete($lineNumber, 0);
			$this->onDebugBreakpointRemoveLine($this->buffers[$bufferId]['breakpoints'][$lineNumber]);
			unset($this->buffers[$bufferId]['breakpoints'][$lineNumber]);
		}
	}

	public function onWindowClose()
	{
		unset($this->tree);
		exit();
	}

	public function onSearchReplaceWindowInput($ev)
	{
		$this->onSearchWindowInput($ev, TRUE);
	}

	public function onSearchWindowInput($ev, $replace=FALSE)
	{
		$activeTabId = $this->getTabSelected();

		if($replace && $ev->GetKeyCode() == 343) // F4 replace
		{
			$this->buffers[$activeTabId]['textctrl']->ReplaceSelection($this->searchReplaceReplaceTextCtrl->GetValue());
		}

		if($ev->GetKeyCode() == 27)
		{
			if($replace)
			{
				$this->searchReplaceWindow->Hide();
			}
			else if($this->searchWindow)
			{
				$this->searchWindow->Hide();
			}
			return;
		}

		if($replace)
		{
			$searchString = $this->searchReplaceSearchTextCtrl->GetValue();
		}
		else
		{
			$searchString = $this->searchTextCtrl->GetValue();
		}

		if(!$searchString)
		{
			return;
		}

		$searchStringLength = strlen($searchString);

		if(in_array($ev->GetKeyCode(), [13, 342])) // enter or f3
		{
			$this->buffers[$activeTabId]['currentSearchPos'] += strlen($searchString);
		}

		$newpos = strpos($this->buffers[$activeTabId]['textctrl']->GetText(), $searchString, $this->buffers[$activeTabId]['currentSearchPos']);

		if($newpos !== FALSE)
		{
			$this->buffers[$activeTabId]['currentSearchPos'] = $newpos;
		}
		else
		{
			$messageDialog = new wxMessageDialog($this, 'Unable to find search string, start from begining of document?', 'Find', wxYES_NO);
			$resp = $messageDialog->ShowModal();
			if($resp == wxID_YES)
			{
				$this->buffers[$activeTabId]['currentSearchPos'] = strpos($this->buffers[$activeTabId]['textctrl']->GetText(), $searchString, 0);
				if($this->buffers[$activeTabId]['currentSearchPos'] === FALSE)
				{
					new wxMessageDialog($this, 'Unable to find search string in document', 'Find', wxOK);
					return;
				}
			}
			else
			{
				return;
			}
		}

		$this->buffers[$activeTabId]['textctrl']->GotoPos($this->buffers[$activeTabId]['currentSearchPos']);
		$this->buffers[$activeTabId]['textctrl']->SetSelection($this->buffers[$activeTabId]['currentSearchPos'], $this->buffers[$activeTabId]['currentSearchPos']+$searchStringLength);
	}

	public function onSearchWindowClose($ev)
	{
		if($this->searchWindow)
		{
			$this->searchWindow->Hide();
		}
	}

	public function onFind($ev)
	{
		if($this->searchReplaceWindow->IsShownOnScreen())
		{
			$this->searchReplaceWindow->hide();
		}

		if($this->searchWindow->IsShownOnScreen())
		{
			$this->searchWindow->hide();
		}
		else if($this->getTabSelected())
		{
			$this->searchWindow->Show();
			$this->searchWindow->SetFocus();
		}
	}

	public function onFindReplace($ev)
	{
		if($this->searchWindow->IsShownOnScreen())
		{
			$this->searchWindow->hide();
		}

		if($this->searchReplaceWindow->IsShownOnScreen())
		{
			$this->searchReplaceWindow->hide();
		}
		else if($this->getTabSelected())
		{
			$this->searchReplaceWindow->Show();
		}
	}

	public function onKeyDown($ev)
	{
		$id = $this->getTabSelected();

		if(!$this->buffers[$id]['onTabModifiedConnected'])
		{
			$this->buffers[$id]['textctrl']->Connect(wxID_ANY, wxEVT_STC_CHANGE, [$this, 'onTabModified']);
			$this->buffers[$id]['onTabModifiedConnected'] = TRUE;
		}

		$keyCode = $ev->GetKeyCode();

		if($keyCode == 27)
		{
			if($this->searchWindow)
			{
				$this->searchWindow->Hide();
			}
		}

		if($ev->ControlDown() && $keyCode == 70)
		{
			$this->searchWindow->Show();
			$this->searchWindow->SetFocus();
		}

		$ev->Skip();
	}

	public function createSearchDialog()
	{
		$id = $this->getTabSelected();

		$this->searchWindow = new wxPanel($this->notebook, wxID_ANY, wxDefaultPosition, new wxSize(220, 35));
		$sizer = new wxBoxSizer(wxVERTICAL);

		$this->searchTextCtrl = new wxTextCtrl($this->searchWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
		$sizer->add($this->searchTextCtrl, 1, wxALL|wxEXPAND, 5);

		$this->searchWindow->SetSizer($sizer);
		$this->searchWindow->Layout();

		$this->searchTextCtrl->Connect(wxID_ANY, wxEVT_KEY_UP, [$this, 'onSearchWindowInput']);
		$this->searchWindow->Hide();
	}

	public function createSearchReplaceDialog()
	{
		$id = $this->getTabSelected();

		$this->searchReplaceWindow = new wxPanel($this->notebook, wxID_ANY, wxDefaultPosition, new wxSize(220, 70));
		$sizer = new wxBoxSizer(wxVERTICAL);

		$this->searchReplaceSearchTextCtrl = new wxTextCtrl($this->searchReplaceWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
		$sizer->add($this->searchReplaceSearchTextCtrl, 1, wxALL|wxEXPAND, 5);

		$this->searchReplaceReplaceTextCtrl = new wxTextCtrl($this->searchReplaceWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
		$sizer->add($this->searchReplaceReplaceTextCtrl, 1, wxALL|wxEXPAND, 5);
		
		$this->searchReplaceWindow->SetSizer($sizer);
		$this->searchReplaceWindow->Layout();

		$this->searchReplaceSearchTextCtrl->Connect(wxID_ANY, wxEVT_KEY_UP, [$this, 'onSearchReplaceWindowInput']);
		$this->searchReplaceReplaceTextCtrl->Connect(wxID_ANY, wxEVT_KEY_UP, [$this, 'onSearchReplaceWindowInput']);
		$this->searchReplaceWindow->Hide();
	}

	public function onDebugStart()
	{
		if(!$this->xdebug->connected)
		{
			$this->xdebug->connect();
			if(!$this->xdebug->connected)
			{
				wxMessageBox('Failed to connect to xdebugd!', 'Error');
				return;
			}
		}

		if(!$this->activeDebugSession)
		{
			$messageDialog = new wxMessageDialog($this, 'Run and debug this tab?', 'Query', wxYES_NO);
			$resp = $messageDialog->ShowModal();
			if($resp == wxID_YES)
			{
				$id = $this->getTabSelected();
				$key = rand();
				$file = $this->buffers[$id]['file'];
// TODO handle configuration options for xdebug from config..
				exec('php -d xdebug.remote_host='.$this->settings['xdebug']['host'].' -d xdebug.remote_port='.$this->settings['xdebug']['port'].' -d xdebug.remote_autostart=1 -d xdebug.idekey='.$key.' '.$file.' > /dev/null &');
// As the process is sent to the background we need to keep poking xdebugd to see if the process has started and registered.
				$retries = 10;
				while($retries--)
				{
					if($this->xdebug->init($key))
					{
						break;
					}
					usleep(100000);
				}

				if($retries)
				{
					$this->activeDebugSession = $key;
					if(!$this->debugContext->IsShown())
					{
						$this->debugShowPanels();
					}
					$this->debugHonorBreakpoints();
				}
				return;
			}

			$data = json_decode($this->xdebug->getSessions(), TRUE);

			if(!is_array($data) || empty($data))
			{
				wxMessageBox('No active debugging sessions available', 'Error');
				return;
			}

			$sessions = array_keys($data, TRUE);
			$messageDialog = new wxSingleChoiceDialog($this, 'Select session', 'Select active debugging session', count($sessions), $sessions, NULL, wxCHOICEDLG_STYLE);
			$resp = $messageDialog->ShowModal();

			if($resp == wxID_CANCEL)
			{
				return;
			}

			if(!$this->xdebug->init($messageDialog->GetStringSelection()))
			{
				return;
			}

			if(!$this->debugContext->IsShown())
			{
				$this->debugShowPanels();
			}

			$this->activeDebugSession = $messageDialog->GetStringSelection();

			$this->debugHonorBreakpoints(); // setup breakpoints that where defined before the session was started.
		}
		else
		{
			$data = json_decode($this->xdebug->run($this->activeDebugSession), TRUE);

			if($data == 0)
			{
				wxMessageBox('Script being debugged has ended unexpectedly!', 'Error');
				return FALSE;
			}

			if($data['status'] == 'break')
			{
				$this->debugOpenFileAndOrMoveToLine($data['filename'], $data['lineno']);
				$this->debugContext->DeleteChildren($this->debugContextRoot);
				$this->debugStack->DeleteAllItems();
				$this->scanDebugStack(json_decode($this->xdebug->getStack($this->activeDebugSession), TRUE));
				$this->scanDebugContext($this->debugContextRoot, json_decode($this->xdebug->getContext($this->activeDebugSession), TRUE));
				$this->debugOpenFileAndOrMoveToLine($data['filename'], $data['lineno']);

			}
			else if($data['status'] == 'stopping')
			{
				$this->activeDebugSession = FALSE;
			}
		}
	}

	public function debugHonorBreakpoints()
	{
		foreach($this->buffers as $id => $buffer)
		{
			foreach($buffer['breakpoints'] as $lineno => $breakpoint)
			{
				if(!$breakpoint)
				{
echo 'Honoring breakpoint: '.$buffer['realpath'].':'.$lineno."\n";
					$this->onDebugBreakpointSetLine($buffer['realpath'], $lineno+1);
				}
			}
		}
	}

	public function onDebugBreakpointSetLine($filename, $lineno)
	{
		if(!$this->xdebug->connected || !$this->activeDebugSession)
		{
			return FALSE;
		}

		$this->xdebug->breakpointSetLine($this->activeDebugSession, $filename, $lineno);
	}

	public function onDebugBreakpointRemoveLine($breakpointId)
	{
		if(!$this->xdebug->connected || !$this->activeDebugSession)
		{
			return FALSE;
		}

		$this->xdebug->breakpointRemoveLine($this->activeDebugSession, $breakpointId);
	}
	
	public function onDebugStop()
	{
		if($this->debugContext->IsShown())
		{
			$this->debugHidePanels();
		}

		if(!$this->xdebug->connected)
		{
			wxMessageBox('Not connected to xdebugd!', 'Error');
			return FALSE;
		}

		if(!$this->activeDebugSession)
		{
			wxMessageBox('No active debug session running!', 'Error');
			return FALSE;
		}

		$this->xdebug->stop($this->activeDebugSession);
		$this->activeDebugSession = FALSE;

		foreach($this->readonlyBuffers as $bufferId)
		{
			$this->buffers[$bufferId]['textctrl']->SetReadOnly(FALSE);
		}
	}

	public function scanDebugContext($parentNode, $tree)
	{
		if(is_array($tree))
		{
			foreach($tree as $node => $props)
			{
				if($props['type'] == 'array' || $props['type'] == 'object')
				{
					$nodeId = $this->debugContext->AppendItem($parentNode, $node.' = '.$props['type']);
					$this->scanDebugContext($nodeId, $props['properties']);
				}
				else
				{
					$this->debugContext->AppendItem($parentNode, $node.' = '.$props['value']);
				}
			}
		}
	}

	public function scanDebugStack($stack)
	{
		// where,	level, type, filename, lineno
		foreach($stack as $idx => $frame)
		{
			$this->debugStack->InsertItem($idx, basename(str_replace('file://', '', $frame['filename'])).':'.$frame['lineno'].' -> '.$frame['where']);
		}
	}

	public function debugOpenFileAndOrMoveToLine($filename, $lineno)
	{
		if(!isset($this->filesOpen[str_replace('file://', '', $filename)]))
		{
			$filename = str_replace('file://', '', $filename);
			$bufferId = $this->addTab(basename($filename), $filename, TRUE);
			$this->filesOpen[$filename] = $bufferId;
			$this->readonlyBuffers[] = $bufferId;
			$this->buffers[$bufferId]['textctrl']->SetReadOnly(TRUE);
		}
		else
		{
			$bufferId = $this->buffers[$this->filesOpen[str_replace('file://', '', $filename)]]['id'];
			$this->notebook->SetSelection($this->buffers[$bufferId]['position']);
			$this->readonlyBuffers[] = $bufferId;
			$this->buffers[$bufferId]['textctrl']->SetReadOnly(TRUE);
		}

		$lineno = $lineno-1;

		$this->buffers[$bufferId]['textctrl']->ScrollToLine($lineno);
		$this->buffers[$bufferId]['textctrl']->GoToLine($lineno);

		$startPos = $this->buffers[$bufferId]['textctrl']->PositionFromLine($lineno);
		$endPos = $this->buffers[$bufferId]['textctrl']->GetLineEndPosition($lineno);
echo 'start: '.$startPos.', end: '.$endPos."\n";
$this->buffers[$bufferId]['textctrl']->SetSelBackground(TRUE, wxRED);
		$this->buffers[$bufferId]['textctrl']->SetSelection($startPos, $endPos);

$this->buffers[$bufferId]['textctrl']->SetSelBackground(TRUE, wxWHITE);

		//$buffer['textctrl']->SetCurrentPos($buffer['textctrl']->GetLineSelStartPosition($lineno));

		if($this->buffers[$bufferId]['debugMarkerPosition'])
		{
echo 'deleting marker: '.$this->buffers[$bufferId]['debugMarkerPosition']."\n";
			$this->buffers[$bufferId]['textctrl']->MarkerDelete($this->buffers[$bufferId]['debugMarkerPosition'], 1);
		}
		$this->buffers[$bufferId]['textctrl']->MarkerAdd($lineno, 1);
		$this->buffers[$bufferId]['debugMarkerPosition'] = $lineno;
	}

	public function onDebugStepInto()
	{
		if(!$this->xdebug)
		{
			wxMessageBox('Not connected to xdebugd!', 'Error');
			return;
		}

		if(!$this->activeDebugSession)
		{
			wxMessageBox('No active debug session running!', 'Error');
			return;
		}


		$data = json_decode($this->xdebug->stepInto($this->activeDebugSession), TRUE);
echo 'data:';
print_r($data);
		if($data == 0)
		{
			wxMessageBox('Script being debugged has ended unexpectedly!', 'Error');
			$this->onDebugStop();
			return FALSE;
		}

		$this->debugContext->DeleteChildren($this->debugContextRoot);
		$this->debugStack->DeleteAllItems();
		$this->scanDebugStack(json_decode($this->xdebug->getStack($this->activeDebugSession), TRUE));
		$this->scanDebugContext($this->debugContextRoot, json_decode($this->xdebug->getContext($this->activeDebugSession), TRUE));
		$this->debugOpenFileAndOrMoveToLine($data['filename'], $data['lineno']);
	}

	public function onDebugStepOver()
	{

	}

	public function onDebugStepOut()
	{

	}

	public function debugShowPanels()
	{
		$this->debugContext->Show();
		$this->debugStack->Show();
		$this->leftPanel->Layout();
	}

	public function debugHidePanels()
	{
		$this->debugContext->Hide();
		$this->debugStack->Hide();
		$this->leftPanel->Layout();
	}

	public function createConsoleWindow($parent)
	{
		$this->consoleWindow = new wxPanel($parent, wxID_ANY, wxDefaultPosition, new wxSize(-1, 300), wxTAB_TRAVERSAL, 'Console');
		$this->consoleWindow->Hide();

		$sizer = new wxBoxSizer(wxVERTICAL);

		$this->consoleTextctrl = new wxStyledTextCtrl($this->consoleWindow, wxID_ANY);
		$this->consoleTextctrl->SetReadOnly(TRUE);
		$this->consoleTextctrl->StyleSetForeground (wxSTC_STYLE_LINENUMBER, new wxColour (75, 75, 75) );
		$this->consoleTextctrl->StyleSetBackground (wxSTC_STYLE_LINENUMBER, new wxColour (220, 220, 220));
		$this->consoleTextctrl->SetMarginType (0, wxSTC_MARGIN_NUMBER);

		$this->consoleTextentry = new wxTextCtrl($this->consoleWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, new wxSize(-1, 25), wxTE_PROCESS_ENTER);
		$this->consoleTextentry->SetMaxSize(new wxSize(-1, 25));
		$this->consoleTextentryCmdHistoryIdx = -1;
		$this->consoleTextentryCmdHistory = [];

		$this->consoleTextentry->Connect(wxID_ANY, wxEVT_KEY_DOWN, [$this, 'onConsoleCommandTextEntry']);


		$sizer->Add($this->consoleTextctrl, 1, wxALL|wxEXPAND, 5);
		$sizer->Add($this->consoleTextentry, 1, wxALL|wxEXPAND, 5);

		$this->consoleWindow->SetSizer($sizer);
	}

	public function onConsoleCommandTextEntry($ev)
	{

		$keycode = $ev->GetKeyCode();
		if($keycode == 315) // up
		{
			if($this->consoleTextentryCmdHistoryIdx==-1)
			{
				$this->consoleTextentryCmdHistoryIdx = sizeof($this->consoleTextentryCmdHistory)-1;
			}
			else if($this->consoleTextentryCmdHistoryIdx>0)
			{
				$this->consoleTextentryCmdHistoryIdx--;
			}

			$this->consoleTextentry->Replace(0, strlen($this->consoleTextentryCmdHistory[$this->consoleTextentryCmdHistoryIdx]),  $this->consoleTextentryCmdHistory[$this->consoleTextentryCmdHistoryIdx]);
		}
		else if($keycode == 317) // down
		{
			if($this->consoleTextentryCmdHistoryIdx < sizeof($this->consoleTextentryCmdHistory)-1)
			{
				$this->consoleTextentryCmdHistoryIdx++;
			}

			$this->consoleTextentry->Replace(0, strlen($this->consoleTextentryCmdHistory[$this->consoleTextentryCmdHistoryIdx]),  $this->consoleTextentryCmdHistory[$this->consoleTextentryCmdHistoryIdx]);
		}
		else if($keycode == 13)
		{
			$cmd = $this->consoleTextentry->GetLineText(0);
			$this->consoleTextentryCmdHistory[] = $cmd;
			$this->consoleTextentryCmdHistoryIdx = -1;

			ob_start();
			eval($cmd);
			$ret = ob_get_contents();
			ob_end_clean();

			$this->consoleTextctrl->SetReadOnly(FALSE);
			$this->consoleTextctrl->AppendText('>>> '.$cmd."\n".$ret."\n");
			$this->consoleTextctrl->SetReadOnly(TRUE);
			$this->consoleTextentry->Clear();
	//		$this->consoleTextctrl->ScrollToEnd();

			$lineCount = substr_count($ret, "\n")+2;
			while($lineCount--)
			{
				$this->consoleTextctrl->LineScrollDown();
			}
		}
		else
		{
			$ev->Skip();
		}
	}

	public function onConsoleShow($ev)
	{
		if($this->consoleWindow->IsShownOnScreen())
		{
			$this->consoleWindow->Show(FALSE);
			$this->secondarySplitterWindow->Unsplit($this->consoleWindow);
		}
		else
		{
			$this->consoleWindow->Show(TRUE);
			$this->secondarySplitterWindow->SplitHorizontally($this->primarySplitterWindow, $this->consoleWindow);
		}
	}

	public function onTabClose($ev)
	{
		$page = $this->notebook->GetPage($ev->GetSelection());
		$id = $page->GetId();
		if($this->buffers[$id]['modified'])
		{
			$messageDialog = new wxMessageDialog($this, 'Tab is being closed but has modifications, save changes?', 'Save changes?', wxYES_NO);
			$resp = $messageDialog->ShowModal();
			if($resp == wxID_YES)
			{
				$this->buffers[$id]['textctrl']->SaveFile($this->buffers[$id]['file']);
			}
		}

// TODO this needs to be put into a method
unset($this->settings['state']['files'][$this->buffers[$id]['file']]);
file_put_contents($this->settingsFile, json_encode($this->settings, JSON_PRETTY_PRINT));

		unset($this->buffers[$id]);
	}

	public function onTabChange($ev)
	{
// TODO when auinotebook events fire - save search string and update the search string textCtrl between tabs 
// echo 'onTabChange: '.$this->getTabSelected()."\n";
// fire call backs for tab..
	}

	public function treeAddRoot($name, $dir, $project=FALSE)
	{
		$node = $this->tree->AppendItem($this->treeRoot, $name);
		/* set project name to root node */
		$nodeData = new wxTreeItemData();
		$nodeData->project = $project;
		$this->tree->SetItemData($node, $nodeData);
		$this->scanDirectory($dir, $node, $this->tree);

	}

	public function addTab($title='New', $file=FALSE, $focus=FALSE, $webview=FALSE)
	{
		static $id=1;

		if($file)
		{
			foreach($this->buffers as $idx => $buffer)
			{
				if($buffer['file'] == $file)
				{
					$this->notebook->SetSelection($buffer['position']);
					return TRUE;
				}
			}
			$this->buffers[$id]['fileMd5'] = md5(file_get_contents($file));
			$this->filesOpen[realpath($file)] = $id;
		}
		else
		{
			$this->buffers[$id]['fileMd5'] = FALSE;
		}

		$this->buffers[$id]['id'] = $id;
		$this->buffers[$id]['title'] = $title;
		$this->buffers[$id]['file'] = $file;
		$this->buffers[$id]['realpath'] = realpath($file);

		$this->buffers[$id]['breakpoints'] = [];
		$this->buffers[$id]['currentSearchPos'] = 0;
		$this->buffers[$id]['modified'] = FALSE;
		$this->buffers[$id]['onTabModifiedConnected'] = FALSE;
		$this->buffers[$id]['debugMarkerPosition'] = FALSE;

		$this->buffers[$id]['panel'] = new wxPanel($this->notebook);
		$this->buffers[$id]['sizer'] = new wxBoxSizer(wxVERTICAL);

		if(!$webview)
		{
			$this->buffers[$id]['textctrl'] = new wxStyledTextCtrl($this->buffers[$id]['panel'], wxID_ANY);

			$this->buffers[$id]['textctrl']->SetMarginWidth (0, 50);
			$this->buffers[$id]['textctrl']->StyleSetForeground (wxSTC_STYLE_LINENUMBER, new wxColour (75, 75, 75) );
			$this->buffers[$id]['textctrl']->StyleSetBackground (wxSTC_STYLE_LINENUMBER, new wxColour (220, 220, 220));
			$this->buffers[$id]['textctrl']->SetMarginType (0, wxSTC_MARGIN_NUMBER);

			$this->buffers[$id]['textctrl']->SetWrapMode (wxSTC_WRAP_WORD);
			$this->buffers[$id]['textctrl']->SetStyleBits(7);
			$this->buffers[$id]['textctrl']->SetLexer(wxSTC_LEX_PHPSCRIPT);

			$this->buffers[$id]['textctrl']->SetCaretForeground(new wxColour(255, 255, 255));
			$this->buffers[$id]['textctrl']->SetCaretWidth(40);
			$this->buffers[$id]['textctrl']->SetCaretPeriod(200);

			//$this->buffers[$id]['textctrl']->StyleSetFontAttr(wxSTC_STYLE_DEFAULT, 8, "Courier New", false, false, false, wxFONTENCODING_DEFAULT);

			$backgroundColor = new wxColour();
			$backgroundColor->SetRGB($this->theme['background-color']);
			$foregroundSelection = new wxColour(0, 0, 0);
			$backgroundSelection = new wxColour(255, 255, 255);

			$fileType = end(explode('.', $file)); 
			if(in_array($fileType, ['php', 'wxphp']))
			{
				foreach($this->styles['php'] as $name => $style)
				{
					$this->buffers[$id]['textctrl']->StyleSetFontAttr($style, $this->settings['font-size'], $this->settings['font-face'], false, false, false, wxFONTENCODING_DEFAULT);

					$foregroundColor =  new wxColour();
					$foregroundColor->SetRGB($this->theme[$name]);

					$this->buffers[$id]['textctrl']->StyleSetBackground($style, $backgroundColor);
					$this->buffers[$id]['textctrl']->StyleSetForeground($style, $foregroundColor);
					$this->buffers[$id]['textctrl']->SetSelBackground($style, $backgroundSelection);
					$this->buffers[$id]['textctrl']->SetSelForeground($style, $foregroundSelection);
				}
			}

			if($file)
			{
				//$this->buffers[$id]['textctrl']->SetText(file_get_contents($file));
				$this->buffers[$id]['textctrl']->LoadFile($file);

$this->settings['state']['files'][$file] = TRUE;
file_put_contents($this->settingsFile, json_encode($this->settings, JSON_PRETTY_PRINT));
			}

			$this->buffers[$id]['panel']->SetId($id);

//			$this->buffers[$id]['textctrl']->Connect(wxID_ANY, wxEVT_STC_CHANGE, [$this, 'onTabModified']);
			$this->buffers[$id]['textctrl']->Connect(wxID_ANY, wxEVT_KEY_DOWN, [$this, 'onKeyDown']);

			$this->buffers[$id]['textctrl']->SetSelection(0, 0);

			// setup the debugging margin
			$this->buffers[$id]['textctrl']->MarkerDefine(1, wxSTC_MARK_CIRCLE, wxRED);
			$this->buffers[$id]['textctrl']->SetMarginSensitive(1, TRUE);

			$this->buffers[$id]['textctrl']->MarkerDefine(2, wxSTC_MARK_ARROW, wxRED);
			$this->buffers[$id]['textctrl']->SetMarginSensitive(2, TRUE);

			$this->buffers[$id]['textctrl']->Connect(wxID_ANY, wxEVT_STC_MARGINCLICK, [$this, 'onMarginClick']);

		}
		else
		{
			$this->buffers[$id]['textctrl'] = wxWebView::NewMethod($this->buffers[$id]['panel'], wxID_ANY, 'http://google.co.uk');
			var_dump($this->buffers[$id]['textctrl']->RunScript("alert('Hello world!');"));

			$this->buffers[$id]['textctrl']->Connect(wxID_ANY, wxEVT_WEBVIEW_NEWWINDOW, [$this, 'onWebviewNavigating']);

		}

		$this->buffers[$id]['sizer']->Add($this->buffers[$id]['textctrl'], 1, wxALL|wxEXPAND, 5);
		$this->buffers[$id]['panel']->SetSizer($this->buffers[$id]['sizer']);
		$this->notebook->AddPage($this->buffers[$id]['panel'], $title, $focus);
		$this->buffers[$id]['position'] = $this->notebook->GetSelection();

		return $id++;
	}

	public function onWebviewNavigating($ev)
	{
echo $ev->GetURL()."\n";
	}

	public function scanDirectory($dir, $parentNode, $tree)
	{
		foreach(scandir($dir) as $node)
		{
			if($node == '.')  continue;
			if($node == '..') continue;
			if($node{0} == '.') continue;

			$filename = $dir.DIRECTORY_SEPARATOR.$node;

			if(is_dir($filename))
			{
				$nodeId = $tree->AppendItem($parentNode, $node);

				$nodeData = new wxTreeItemData();
				$nodeData->filename = $filename;
				$nodeData->name = $node;

				$tree->SetItemData($nodeId, $nodeData);
				$this->scanDirectory($dir . DIRECTORY_SEPARATOR . $node, $nodeId, $tree);
			}
			else
			{
				$nodeId = $tree->AppendItem($parentNode, $node);

				$nodeData = new wxTreeItemData();
				$nodeData->filename = $filename;
				$nodeData->name = $node;

				$tree->SetItemData($nodeId, $nodeData);
			}
		}
	}

	public function initMenu($panel)
	{
		$menu = new wxMenuBar();
		$fileMenu = new wxMenu();

		$fileMenu->Append(1,"N&ew","New buffer");
		$fileMenu->Append(2,"E&xit","Quit this program");
		$menu->Append($fileMenu,"&File");

		$menuAbout = new wxMenu();
		$menuAbout->Append(4,"&About...","Show about dialog");
		$menu->Append($menuAbout,"&Help");

		$panel->SetMenuBar($menu);

		$this->Connect(1, wxEVT_COMMAND_MENU_SELECTED, [$this,"onAddTab"]);
		$this->Connect(2, wxEVT_COMMAND_MENU_SELECTED, [$this,"onQuit"]);
		$this->Connect(4, wxEVT_COMMAND_MENU_SELECTED, [$this,"onAbout"]);
	}

	public function onTabModified($ev)
	{
		$id = $this->getTabSelected();
// TODO - save diskMd5 to $this->buffers so it's not read on each event.  Make sure to update the md5 on a file save.
// TODO - Not sure if it's even worth checking against the file as every modification causes an event that has to md5 the entire file so could be very slow on large files..
		$diskMd5 = $this->buffers[$id]['fileMd5']; //md5(file_get_contents($this->buffers[$id]['file']));
		$bufferMd5 = md5($this->buffers[$id]['textctrl']->GetText());

		if($this->buffers[$id]['file'] && ( $diskMd5 != $bufferMd5))
		{
			$this->buffers[$id]['modified'] = TRUE;
			$this->notebook->SetPageText($this->notebook->GetSelection(), $this->buffers[$id]['title'].'*');
		}
		else if($diskMd5 == $bufferMd5)
		{
			$this->buffers[$id]['modified'] = FALSE;
			$this->notebook->SetPageText($this->notebook->GetSelection(), $this->buffers[$id]['title']);
		}
	}

	public function getTabSelected()
	{
		$selection = $this->notebook->GetSelection();

		if($selection != -1)
		{
			$page = $this->notebook->GetPage($selection);
			return $page->GetId();
		}
		return FALSE;
	}

	public function onOpenFile()
	{
		$openDialog = new wxFileDialog($this, 'Open file', wxEmptyString, wxEmptyString, wxFileSelectorDefaultWildcardStr);
		if($openDialog->ShowModal() != wxID_CANCEL)
		{
			$filepath = $openDialog->GetPath();
			$filename = $openDialog->GetFilename();
			if(file_exists($filename))
			{
				$this->addTab($filename, $filepath, TRUE);
			}
		}
	}

	public function onSaveTab()
	{
		$id = $this->getTabSelected();
		if($id)
		{
			$this->buffers[$id]['textctrl']->SaveFile($this->buffers[$id]['file']);
			$this->buffers[$id]['fileMd5'] = md5(file_get_contents($this->buffers[$id]['file']));
			$this->notebook->SetPageText($this->notebook->GetSelection(), $this->buffers[$id]['title']); // remove * from title
		}
	}

	public function onSaveTabAs()
	{
		$id = $this->getTabSelected();
		if(!$id)
		{
			return FALSE;
		}

		$saveAsDialog = new wxFileDialog($this, 'Save file as', wxEmptyString, wxEmptyString, wxFileSelectorDefaultWildcardStr, wxFD_SAVE);
		if($saveAsDialog->ShowModal() != wxID_CANCEL)
		{
echo $saveAsDialog->GetPath().' '.$saveAsDialog->GetFilename()."\n";
			$file = $saveAsDialog->GetPath();
			$filename = $saveAsDialog->GetFileName();
			if(!file_exists($file))
			{
				$this->buffers[$id]['textctrl']->SaveFile($file);
				$this->buffers[$id]['file'] = $file;
				$this->filesOpen[realpath($file)] = $id;
				$this->buffers[$id]['title'] = $filename;
				$this->buffers[$id]['fileMd5'] = md5(file_get_contents($this->buffers[$id]['file']));
				$this->notebook->SetPageText($this->notebook->GetSelection(), $filename);
			}
			// save to file
			// update current tab with new file
		}
//TODO - be sure to update fileMd5
	}

	public function onTreeClick($ev)
	{
		$data = $this->tree->GetItemData($this->tree->GetSelection());
		if(isset($data->project))
		{
			$this->activeProject = $data->project;
		}
		else if(isset($data->filename))
		{
			if(is_file($data->filename))
			{
				$this->addTab($data->name, $data->filename, TRUE);
			}
		}

		$ev->Skip();
	}

	public function onAddTab()
	{
//		$this->addTab('New', FALSE, TRUE, TRUE); // adds a new webview instead of new editor tab
		$this->addTab('New', FALSE, TRUE);
	}

	public function onQuit()
	{
		foreach($this->buffers as $id => &$buffer)
		{
			if($buffer['textctrl']->GetModify())
			{
				$saveDialog = new wxMessageDialog($this, $buffer['title'].' is unsaved, save now?');

				if($saveDialog->ShowModal() != wxID_CANCEL)
				{
					$buffer['textctrl']->SaveFile();
				}
			}
		}
		$this->Destroy();
	}

	public function onAbout()
	{
		wxMessageBox("Welcome to Grease!\n\nCopyright(c) 2014 Andrew Rose (http://andrewrose.co.uk)\n\nFree for non-commerical use.", 'About');
	}
}

class myApp extends wxApp
{
	function OnInit()
	{
		$mf = new grease();
		$mf->Show();

		return FALSE;
	}

	function OnExit()
	{
		return FALSE;
	}
}

/*$pid = pcntl_fork();
if($pid)
{
	exit();
}*/

wxInitAllImageHandlers();
$xt = new myApp();
wxApp::SetInstance($xt);
wxEntry();
